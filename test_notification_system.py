#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π EduAnalytics
"""

import requests
import json
import time
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
ADMIN_TOKEN = None

def get_auth_token():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    global ADMIN_TOKEN
    
    if ADMIN_TOKEN:
        return ADMIN_TOKEN
    
    try:
        response = requests.post(f"{BASE_URL}/auth/login", json={
            "username": "admin@example.com",
            "password": "admin"
        })
        
        if response.status_code == 200:
            data = response.json()
            ADMIN_TOKEN = data["access_token"]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {ADMIN_TOKEN[:20]}...")
            return ADMIN_TOKEN
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def test_notification_templates():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    token = get_auth_token()
    if not token:
        return False
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/notifications/templates",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            templates = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤:")
            for template in templates:
                print(f"  - {template['name']} ({template['event_type']})")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        return False

def test_available_channels():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤."""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
    
    token = get_auth_token()
    if not token:
        return False
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/notifications/channels",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            channels = response.json()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {', '.join(channels)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return False

def test_available_priorities():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤."""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤...")
    
    token = get_auth_token()
    if not token:
        return False
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/notifications/priorities",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            priorities = response.json()
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã: {', '.join(priorities)}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤: {e}")
        return False

def test_send_notification():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    print("\nüì§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    token = get_auth_token()
    if not token:
        return False
    
    notification_data = {
        "event_type": "test_notification",
        "data": {
            "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ Python —Å–∫—Ä–∏–ø—Ç–∞",
            "timestamp": datetime.now().isoformat(),
            "test": True,
            "script": "test_notification_system.py"
        },
        "channels": ["webhook"],
        "priority": "normal",
        "recipients": [
            {
                "id": 1,
                "name": "Test User",
                "email": "test@example.com",
                "type": "user"
            }
        ]
    }
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/notifications/send",
            json=notification_data,
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:")
            print(f"  - –ö–∞–Ω–∞–ª—ã: {result.get('channels_used', [])}")
            print(f"  - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {result.get('priority', 'unknown')}")
            print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result.get('results', {})}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"  –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return False

def test_send_bulk_notifications():
    """–¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    token = get_auth_token()
    if not token:
        return False
    
    notifications = [
        {
            "event_type": "deadline_reminder",
            "data": {
                "assignment_title": "–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ 1",
                "due_date": "2024-12-31T23:59:59Z",
                "course_name": "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
                "hours_remaining": 24
            },
            "channels": ["webhook", "email"],
            "priority": "high",
            "recipients": [
                {"id": 1, "name": "–°—Ç—É–¥–µ–Ω—Ç 1", "email": "student1@example.com"},
                {"id": 2, "name": "–°—Ç—É–¥–µ–Ω—Ç 2", "email": "student2@example.com"}
            ]
        },
        {
            "event_type": "grade_notification",
            "data": {
                "student_name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
                "grade_value": 85.5,
                "assignment_title": "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
                "course_name": "–§–∏–∑–∏–∫–∞"
            },
            "channels": ["webhook"],
            "priority": "normal",
            "recipients": [
                {"id": 1, "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤", "email": "ivan@example.com"}
            ]
        }
    ]
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/notifications/send-bulk",
            json=notifications,
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:")
            print(f"  - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('message', 'Unknown')}")
            print(f"  - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {len(result.get('results', []))} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            print(f"  –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        return False

def test_notification_stats():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    token = get_auth_token()
    if not token:
        return False
    
    try:
        response = requests.get(
            f"{BASE_URL}/api/notifications/stats",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            stats = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
            print(f"  - –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('total_sent', 0)}")
            print(f"  - –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {stats.get('total_failed', 0)}")
            print(f"  - –ü–æ –∫–∞–Ω–∞–ª–∞–º: {stats.get('by_channel', {})}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def test_webhook_notification():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
    
    token = get_auth_token()
    if not token:
        return False
    
    try:
        response = requests.post(
            f"{BASE_URL}/api/v1/n8n/notify",
            json={
                "event_type": "test_notification",
                "data": {
                    "message": "Webhook —Ç–µ—Å—Ç –∏–∑ Python —Å–∫—Ä–∏–ø—Ç–∞",
                    "timestamp": datetime.now().isoformat(),
                    "test": True
                }
            },
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {result.get('message', 'Success')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"  –û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ webhook: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π EduAnalytics")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    try:
        response = requests.get(f"{BASE_URL}/")
        if response.status_code == 200:
            print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {BASE_URL}")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", test_notification_templates),
        ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã", test_available_channels),
        ("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã", test_available_priorities),
        ("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", test_send_notification),
        ("–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞", test_send_bulk_notifications),
        ("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", test_notification_stats),
        ("Webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", test_webhook_notification)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {status}: {test_name}")
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")

if __name__ == "__main__":
    main()
