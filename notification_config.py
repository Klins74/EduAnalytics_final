#!/usr/bin/env python3
"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π EduAnalytics

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π,
–≤–∫–ª—é—á–∞—è webhook URLs, –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏, —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ç.–¥.
"""

from typing import List, Dict, Any
from pydantic import BaseSettings, validator
from enum import Enum

class NotificationChannel(str, Enum):
    """–ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    EMAIL = "email"
    TELEGRAM = "telegram"
    SMS = "sms"
    PUSH = "push"
    SLACK = "slack"
    DISCORD = "discord"
    WEBHOOK = "webhook"

class NotificationPriority(str, Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"

class NotificationEventType(str, Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    DEADLINE_APPROACHING = "deadline_approaching"
    GRADE_CREATED = "grade_created"
    GRADE_UPDATED = "grade_updated"
    FEEDBACK_CREATED = "feedback_created"
    SCHEDULE_CREATED = "schedule_created"
    SCHEDULE_UPDATED = "schedule_updated"
    SUBMISSION_CREATED = "submission_created"
    ASSIGNMENT_CREATED = "assignment_created"
    COURSE_ENROLLMENT = "course_enrollment"
    SYSTEM_MAINTENANCE = "system_maintenance"

class NotificationSettings(BaseSettings):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ENABLE_NOTIFICATIONS: bool = True
    DEFAULT_TIMEZONE: str = "Europe/Moscow"
    MAX_RETRY_ATTEMPTS: int = 3
    RETRY_DELAY_SECONDS: int = 5
    
    # Webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    WEBHOOK_URL: str = "http://localhost:5678/webhook/eduanalytics-webhook"
    WEBHOOK_TIMEOUT: int = 30
    WEBHOOK_SECRET: str = ""  # –°–µ–∫—Ä–µ—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ webhook'–æ–≤
    WEBHOOK_VERIFY_SSL: bool = True
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    DEADLINE_CHECK_ENABLED: bool = True
    DEADLINE_CHECK_INTERVAL: int = 3600  # —Å–µ–∫—É–Ω–¥—ã (1 —á–∞—Å)
    DEADLINE_NOTIFICATION_DAYS: List[int] = [7, 3, 1]  # –¥–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    DEADLINE_CHECK_TIME: str = "09:00"  # –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
    RATE_LIMIT_ENABLED: bool = True
    MAX_NOTIFICATIONS_PER_USER_PER_HOUR: int = 50
    MAX_NOTIFICATIONS_PER_USER_PER_DAY: int = 200
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    LOG_NOTIFICATIONS: bool = True
    LOG_LEVEL: str = "INFO"
    LOG_FILE_PATH: str = "logs/notifications.log"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
    ENABLED_CHANNELS: List[NotificationChannel] = [
        NotificationChannel.EMAIL,
        NotificationChannel.WEBHOOK
    ]
    
    # Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    EMAIL_ENABLED: bool = True
    EMAIL_SERVICE: str = "emailjs"  # emailjs, smtp, sendgrid
    EMAIL_SERVICE_ID: str = ""
    EMAIL_USER_ID: str = ""
    EMAIL_ACCESS_TOKEN: str = ""
    
    # SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    SMTP_HOST: str = "smtp.gmail.com"
    SMTP_PORT: int = 587
    SMTP_USERNAME: str = ""
    SMTP_PASSWORD: str = ""
    SMTP_USE_TLS: bool = True
    
    # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    TELEGRAM_ENABLED: bool = False
    TELEGRAM_BOT_TOKEN: str = ""
    TELEGRAM_CHAT_ID: str = ""
    
    # SMS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SMS_ENABLED: bool = False
    SMS_SERVICE: str = "twilio"  # twilio, nexmo
    SMS_API_KEY: str = ""
    SMS_API_SECRET: str = ""
    SMS_FROM_NUMBER: str = ""
    
    # Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    PUSH_ENABLED: bool = False
    PUSH_SERVICE: str = "firebase"  # firebase, onesignal
    PUSH_API_KEY: str = ""
    PUSH_PROJECT_ID: str = ""
    
    # Slack –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    SLACK_ENABLED: bool = False
    SLACK_WEBHOOK_URL: str = ""
    SLACK_CHANNEL: str = "#notifications"
    
    # Discord –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    DISCORD_ENABLED: bool = False
    DISCORD_WEBHOOK_URL: str = ""
    
    class Config:
        env_file = ".env"
        env_prefix = "NOTIFICATION_"
    
    @validator('DEADLINE_NOTIFICATION_DAYS')
    def validate_deadline_days(cls, v):
        if not v or not all(isinstance(day, int) and day > 0 for day in v):
            raise ValueError('DEADLINE_NOTIFICATION_DAYS –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞')
        return sorted(v, reverse=True)  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    
    @validator('WEBHOOK_URL')
    def validate_webhook_url(cls, v):
        if v and not v.startswith(('http://', 'https://')):
            raise ValueError('WEBHOOK_URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://')
        return v

# –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_TEMPLATES = {
    NotificationEventType.DEADLINE_APPROACHING: {
        "email": {
            "subject": "üö® –ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω: {assignment_title}",
            "template_id": "deadline_template",
            "variables": [
                "student_name", "assignment_title", "course_name", 
                "due_date", "days_remaining"
            ]
        },
        "telegram": {
            "template": (
                "üö® –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ!\n\n"
                "–ó–∞–¥–∞–Ω–∏–µ: {assignment_title}\n"
                "–ö—É—Ä—Å: {course_name}\n"
                "–î–æ —Å–¥–∞—á–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω.\n"
                "–î–∞—Ç–∞ —Å–¥–∞—á–∏: {due_date}\n\n"
                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ–≤—Ä–µ–º—è!"
            )
        },
        "sms": {
            "template": (
                "–î–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω.: {assignment_title}. "
                "–°–¥–∞—Ç—å –¥–æ {due_date}"
            )
        }
    },
    
    NotificationEventType.GRADE_CREATED: {
        "email": {
            "subject": "üìä –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: {assignment_title}",
            "template_id": "grade_template",
            "variables": [
                "student_name", "assignment_title", "course_name",
                "grade_value", "teacher_name", "comment"
            ]
        },
        "telegram": {
            "template": (
                "üìä –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞!\n\n"
                "–ó–∞–¥–∞–Ω–∏–µ: {assignment_title}\n"
                "–ö—É—Ä—Å: {course_name}\n"
                "–û—Ü–µ–Ω–∫–∞: {grade_value}\n"
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher_name}\n\n"
                "{comment}"
            )
        },
        "sms": {
            "template": (
                "–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ {grade_value} –∑–∞ {assignment_title} "
                "–æ—Ç {teacher_name}"
            )
        }
    },
    
    NotificationEventType.FEEDBACK_CREATED: {
        "email": {
            "subject": "üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {submission_title}",
            "template_id": "feedback_template",
            "variables": [
                "student_name", "submission_title", "assignment_title",
                "course_name", "author_name", "feedback_text"
            ]
        },
        "telegram": {
            "template": (
                "üí¨ –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!\n\n"
                "–†–∞–±–æ—Ç–∞: {submission_title}\n"
                "–ó–∞–¥–∞–Ω–∏–µ: {assignment_title}\n"
                "–ö—É—Ä—Å: {course_name}\n"
                "–ê–≤—Ç–æ—Ä: {author_name}\n\n"
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback_text}"
            )
        }
    },
    
    NotificationEventType.SCHEDULE_CREATED: {
        "email": {
            "subject": "üìÖ –ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: {course_name}",
            "template_id": "schedule_template",
            "variables": [
                "course_name", "instructor_name", "schedule_date",
                "start_time", "end_time", "location", "description"
            ]
        },
        "telegram": {
            "template": (
                "üìÖ –ù–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ!\n\n"
                "–ö—É—Ä—Å: {course_name}\n"
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {instructor_name}\n"
                "–î–∞—Ç–∞: {schedule_date}\n"
                "–í—Ä–µ–º—è: {start_time} - {end_time}\n"
                "–ú–µ—Å—Ç–æ: {location}\n\n"
                "{description}"
            )
        }
    },
    
    NotificationEventType.SCHEDULE_UPDATED: {
        "email": {
            "subject": "üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏: {course_name}",
            "template_id": "schedule_update_template",
            "variables": [
                "course_name", "instructor_name", "schedule_date",
                "start_time", "end_time", "location", "description",
                "changes"
            ]
        },
        "telegram": {
            "template": (
                "üìÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏!\n\n"
                "–ö—É—Ä—Å: {course_name}\n"
                "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {instructor_name}\n"
                "–î–∞—Ç–∞: {schedule_date}\n"
                "–í—Ä–µ–º—è: {start_time} - {end_time}\n"
                "–ú–µ—Å—Ç–æ: {location}\n\n"
                "–ò–∑–º–µ–Ω–µ–Ω–∏—è:\n{changes}"
            )
        }
    }
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_PRIORITIES = {
    NotificationEventType.DEADLINE_APPROACHING: NotificationPriority.HIGH,
    NotificationEventType.GRADE_CREATED: NotificationPriority.NORMAL,
    NotificationEventType.GRADE_UPDATED: NotificationPriority.NORMAL,
    NotificationEventType.FEEDBACK_CREATED: NotificationPriority.NORMAL,
    NotificationEventType.SCHEDULE_CREATED: NotificationPriority.NORMAL,
    NotificationEventType.SCHEDULE_UPDATED: NotificationPriority.HIGH,
    NotificationEventType.SUBMISSION_CREATED: NotificationPriority.LOW,
    NotificationEventType.ASSIGNMENT_CREATED: NotificationPriority.NORMAL,
    NotificationEventType.COURSE_ENROLLMENT: NotificationPriority.NORMAL,
    NotificationEventType.SYSTEM_MAINTENANCE: NotificationPriority.URGENT,
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATION_CHANNELS = {
    NotificationEventType.DEADLINE_APPROACHING: [
        NotificationChannel.EMAIL,
        NotificationChannel.TELEGRAM,
        NotificationChannel.PUSH
    ],
    NotificationEventType.GRADE_CREATED: [
        NotificationChannel.EMAIL,
        NotificationChannel.TELEGRAM
    ],
    NotificationEventType.GRADE_UPDATED: [
        NotificationChannel.EMAIL
    ],
    NotificationEventType.FEEDBACK_CREATED: [
        NotificationChannel.EMAIL,
        NotificationChannel.PUSH
    ],
    NotificationEventType.SCHEDULE_CREATED: [
        NotificationChannel.EMAIL,
        NotificationChannel.TELEGRAM
    ],
    NotificationEventType.SCHEDULE_UPDATED: [
        NotificationChannel.EMAIL,
        NotificationChannel.TELEGRAM,
        NotificationChannel.PUSH
    ],
    NotificationEventType.SUBMISSION_CREATED: [
        NotificationChannel.EMAIL
    ],
    NotificationEventType.ASSIGNMENT_CREATED: [
        NotificationChannel.EMAIL
    ],
    NotificationEventType.COURSE_ENROLLMENT: [
        NotificationChannel.EMAIL
    ],
    NotificationEventType.SYSTEM_MAINTENANCE: [
        NotificationChannel.EMAIL,
        NotificationChannel.TELEGRAM,
        NotificationChannel.PUSH,
        NotificationChannel.SMS
    ],
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_USER_PREFERENCES = {
    "email_notifications": True,
    "telegram_notifications": False,
    "sms_notifications": False,
    "push_notifications": True,
    "quiet_hours_enabled": True,
    "quiet_hours_start": "22:00",
    "quiet_hours_end": "08:00",
    "weekend_notifications": False,
    "notification_frequency": "immediate",  # immediate, daily_digest, weekly_digest
    "language": "ru",
    "timezone": "Europe/Moscow"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
ROLE_NOTIFICATION_SETTINGS = {
    "student": {
        "enabled_events": [
            NotificationEventType.DEADLINE_APPROACHING,
            NotificationEventType.GRADE_CREATED,
            NotificationEventType.GRADE_UPDATED,
            NotificationEventType.FEEDBACK_CREATED,
            NotificationEventType.SCHEDULE_CREATED,
            NotificationEventType.SCHEDULE_UPDATED,
            NotificationEventType.ASSIGNMENT_CREATED,
        ],
        "default_channels": [
            NotificationChannel.EMAIL,
            NotificationChannel.PUSH
        ]
    },
    "teacher": {
        "enabled_events": [
            NotificationEventType.SUBMISSION_CREATED,
            NotificationEventType.SCHEDULE_CREATED,
            NotificationEventType.SCHEDULE_UPDATED,
            NotificationEventType.COURSE_ENROLLMENT,
            NotificationEventType.SYSTEM_MAINTENANCE,
        ],
        "default_channels": [
            NotificationChannel.EMAIL,
            NotificationChannel.TELEGRAM
        ]
    },
    "admin": {
        "enabled_events": list(NotificationEventType),
        "default_channels": [
            NotificationChannel.EMAIL,
            NotificationChannel.TELEGRAM,
            NotificationChannel.SLACK
        ]
    }
}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = NotificationSettings()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π

def get_notification_template(event_type: NotificationEventType, channel: NotificationChannel) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –∏ –∫–∞–Ω–∞–ª–∞"""
    return NOTIFICATION_TEMPLATES.get(event_type, {}).get(channel.value, {})

def get_notification_priority(event_type: NotificationEventType) -> NotificationPriority:
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return NOTIFICATION_PRIORITIES.get(event_type, NotificationPriority.NORMAL)

def get_notification_channels(event_type: NotificationEventType) -> List[NotificationChannel]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return NOTIFICATION_CHANNELS.get(event_type, [NotificationChannel.EMAIL])

def get_user_role_settings(role: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return ROLE_NOTIFICATION_SETTINGS.get(role, ROLE_NOTIFICATION_SETTINGS["student"])

def is_notification_enabled(event_type: NotificationEventType, user_role: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role_settings = get_user_role_settings(user_role)
    return event_type in role_settings.get("enabled_events", [])

def validate_configuration() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫"""
    errors = []
    
    if settings.ENABLE_NOTIFICATIONS:
        if not settings.WEBHOOK_URL:
            errors.append("WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if settings.EMAIL_ENABLED and settings.EMAIL_SERVICE == "emailjs":
            if not settings.EMAIL_SERVICE_ID:
                errors.append("EMAIL_SERVICE_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è EmailJS")
            if not settings.EMAIL_USER_ID:
                errors.append("EMAIL_USER_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è EmailJS")
        
        if settings.EMAIL_ENABLED and settings.EMAIL_SERVICE == "smtp":
            if not settings.SMTP_USERNAME or not settings.SMTP_PASSWORD:
                errors.append("SMTP credentials –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        if settings.TELEGRAM_ENABLED and not settings.TELEGRAM_BOT_TOKEN:
            errors.append("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        if settings.SMS_ENABLED and not settings.SMS_API_KEY:
            errors.append("SMS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    return errors

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_errors = validate_configuration()
    if config_errors:
        print("–û—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for error in config_errors:
            print(f"  - {error}")
    else:
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    
    # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print(f"\n–®–∞–±–ª–æ–Ω –¥–ª—è –¥–µ–¥–ª–∞–π–Ω–∞ (email): {get_notification_template(NotificationEventType.DEADLINE_APPROACHING, NotificationChannel.EMAIL)}")
    print(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏: {get_notification_priority(NotificationEventType.GRADE_CREATED)}")
    print(f"–ö–∞–Ω–∞–ª—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {get_notification_channels(NotificationEventType.SCHEDULE_UPDATED)}")
    print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {get_user_role_settings('student')}")