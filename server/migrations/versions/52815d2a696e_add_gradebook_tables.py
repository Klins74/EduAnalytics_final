"""Add gradebook tables

Revision ID: 52815d2a696e
Revises: 52640e8fd087
Create Date: 2025-08-06 15:20:59.730045

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '52815d2a696e'
down_revision: Union[str, Sequence[str], None] = '52640e8fd087'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('gradebook_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=True),
    sa.Column('grade_value', sa.Float(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignments.id'], ),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gradebook_entries_assignment_id'), 'gradebook_entries', ['assignment_id'], unique=False)
    op.create_index(op.f('ix_gradebook_entries_course_id'), 'gradebook_entries', ['course_id'], unique=False)
    op.create_index(op.f('ix_gradebook_entries_id'), 'gradebook_entries', ['id'], unique=False)
    op.create_index(op.f('ix_gradebook_entries_student_id'), 'gradebook_entries', ['student_id'], unique=False)
    op.create_table('gradebook_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('entry_id', sa.Integer(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=True),
    sa.Column('grade_value', sa.Float(), nullable=False),
    sa.Column('comment', sa.Text(), nullable=True),
    sa.Column('operation', sa.Enum('create', 'update', 'delete', name='operationtype'), nullable=False),
    sa.Column('changed_by', sa.Integer(), nullable=False),
    sa.Column('changed_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['changed_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['entry_id'], ['gradebook_entries.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gradebook_history_entry_id'), 'gradebook_history', ['entry_id'], unique=False)
    op.create_index(op.f('ix_gradebook_history_id'), 'gradebook_history', ['id'], unique=False)
    
    # Use batch mode for SQLite compatibility
    conn = op.get_bind()
    constraint_exists = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_grades_student_id_students' AND table_name = 'grades'
    """)).scalar() is not None
    with op.batch_alter_table('grades', schema=None) as batch_op:
        if constraint_exists:
            batch_op.drop_constraint('fk_grades_student_id_students', type_='foreignkey')
        # Проверяем, существует ли constraint перед созданием
        fk_graded_by_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_graded_by_users' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_graded_by_exists:
            batch_op.create_foreign_key('fk_grades_graded_by_users', 'users', ['graded_by'], ['id'])
        # Проверяем, существует ли constraint перед созданием
        fk_submission_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_submission_id_submissions' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_submission_id_exists:
            batch_op.create_foreign_key('fk_grades_submission_id_submissions', 'submissions', ['submission_id'], ['id'])
        # Проверяем, существует ли колонка value перед удалением
        column_value_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'value'
        """)).scalar() is not None
        if column_value_exists:
            batch_op.drop_column('value')
        # Проверяем, существует ли колонка student_id перед удалением
        column_student_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'student_id'
        """)).scalar() is not None
        if column_student_id_exists:
            batch_op.drop_column('student_id')
        # Проверяем, существует ли колонка subject перед удалением
        column_subject_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'subject'
        """)).scalar() is not None
        if column_subject_exists:
            batch_op.drop_column('subject')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Use batch mode for SQLite compatibility
    conn = op.get_bind()
    constraint_exists = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_grades_student_id_students' AND table_name = 'grades'
    """)).scalar() is not None
    with op.batch_alter_table('grades', schema=None) as batch_op:
        if constraint_exists:
            batch_op.drop_constraint('fk_grades_student_id_students', type_='foreignkey')
        batch_op.create_foreign_key('fk_grades_graded_by_users', 'users', ['graded_by'], ['id'])
        batch_op.create_foreign_key('fk_grades_submission_id_submissions', 'submissions', ['submission_id'], ['id'])
        batch_op.drop_column('value')
        batch_op.drop_column('student_id')
        batch_op.drop_column('subject')
    batch_op.add_column(sa.Column('subject', sa.INTEGER(), nullable=False))
    batch_op.add_column(sa.Column('student_id', sa.INTEGER(), nullable=False))
    batch_op.add_column(sa.Column('value', sa.INTEGER(), nullable=False))
    batch_op.drop_constraint('fk_grades_graded_by_users', type_='foreignkey')
    batch_op.drop_constraint('fk_grades_submission_id_submissions', type_='foreignkey')
    batch_op.create_foreign_key('fk_grades_student_id_students', 'students', ['student_id'], ['id'])
    op.drop_index(op.f('ix_gradebook_history_id'), table_name='gradebook_history')
    op.drop_index(op.f('ix_gradebook_history_entry_id'), table_name='gradebook_history')
    op.drop_table('gradebook_history')
    op.drop_index(op.f('ix_gradebook_entries_student_id'), table_name='gradebook_entries')
    op.drop_index(op.f('ix_gradebook_entries_id'), table_name='gradebook_entries')
    op.drop_index(op.f('ix_gradebook_entries_course_id'), table_name='gradebook_entries')
    op.drop_index(op.f('ix_gradebook_entries_assignment_id'), table_name='gradebook_entries')
    op.drop_table('gradebook_entries')
    # ### end Alembic commands ###
