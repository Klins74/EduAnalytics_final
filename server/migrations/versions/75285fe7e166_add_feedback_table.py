"""add_feedback_table

Revision ID: 75285fe7e166
Revises: 52815d2a696e
Create Date: 2025-08-06 15:32:23.327416

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '75285fe7e166'
down_revision: Union[str, Sequence[str], None] = '52815d2a696e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('feedbacks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('submission_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.ForeignKeyConstraint(['submission_id'], ['submissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feedbacks_id'), 'feedbacks', ['id'], unique=False)
    op.create_index(op.f('ix_feedbacks_submission_id'), 'feedbacks', ['submission_id'], unique=False)
    op.create_index(op.f('ix_feedbacks_user_id'), 'feedbacks', ['user_id'], unique=False)
    
    # Use batch mode for SQLite compatibility
    conn = op.get_bind()
    constraint_exists = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_grades_student_id_students' AND table_name = 'grades'
    """)).scalar() is not None
    with op.batch_alter_table('grades', schema=None) as batch_op:
        if constraint_exists:
            batch_op.drop_constraint('fk_grades_student_id_students', type_='foreignkey')
        # Проверяем, существует ли constraint перед созданием
        fk_submission_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_submission_id_submissions' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_submission_id_exists:
            batch_op.create_foreign_key('fk_grades_submission_id_submissions', 'submissions', ['submission_id'], ['id'])
        # Проверяем, существует ли constraint перед созданием
        fk_graded_by_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_graded_by_users' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_graded_by_exists:
            batch_op.create_foreign_key('fk_grades_graded_by_users', 'users', ['graded_by'], ['id'])
        # Проверяем, существует ли колонка subject перед удалением
        column_subject_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'subject'
        """)).scalar() is not None
        if column_subject_exists:
            batch_op.drop_column('subject')
        # Проверяем, существует ли колонка student_id перед удалением
        column_student_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'student_id'
        """)).scalar() is not None
        if column_student_id_exists:
            batch_op.drop_column('student_id')
        # Проверяем, существует ли колонка value перед удалением
        column_value_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'value'
        """)).scalar() is not None
        if column_value_exists:
            batch_op.drop_column('value')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch mode for SQLite compatibility
    conn = op.get_bind()
    constraint_exists = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_grades_student_id_students' AND table_name = 'grades'
    """)).scalar() is not None
    with op.batch_alter_table('grades', schema=None) as batch_op:
        if constraint_exists:
            batch_op.drop_constraint('fk_grades_student_id_students', type_='foreignkey')
        batch_op.create_foreign_key('fk_grades_submission_id_submissions', 'submissions', ['submission_id'], ['id'])
        batch_op.create_foreign_key('fk_grades_graded_by_users', 'users', ['graded_by'], ['id'])
        batch_op.drop_column('subject')
        batch_op.drop_column('student_id')
        batch_op.drop_column('value')
    # ### end Alembic commands ###
    op.drop_index(op.f('ix_feedbacks_user_id'), table_name='feedbacks')
    op.drop_index(op.f('ix_feedbacks_submission_id'), table_name='feedbacks')
    op.drop_index(op.f('ix_feedbacks_id'), table_name='feedbacks')
    op.drop_table('feedbacks')
    # ### end Alembic commands ###
