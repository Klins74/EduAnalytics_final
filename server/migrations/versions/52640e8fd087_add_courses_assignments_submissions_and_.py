"""Add courses, assignments, submissions and updated grades tables

Revision ID: 52640e8fd087
Revises: 628bd53810ff
Create Date: 2025-08-06 14:58:41.499753

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '52640e8fd087'
down_revision: Union[str, Sequence[str], None] = '628bd53810ff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.CheckConstraint('start_date <= end_date', name='check_course_dates'),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_courses_id'), 'courses', ['id'], unique=False)
    op.create_index(op.f('ix_courses_title'), 'courses', ['title'], unique=True)
    op.create_table('assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('due_date', sa.DateTime(), nullable=False),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_assignments_id'), 'assignments', ['id'], unique=False)
    op.create_index(op.f('ix_assignments_title'), 'assignments', ['title'], unique=False)
    op.create_table('submissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('submitted_at', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('submitted', 'late', 'graded', name='submissionstatus'), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('assignment_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['assignment_id'], ['assignments.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_submissions_id'), 'submissions', ['id'], unique=False)
    # Use batch mode for SQLite compatibility
    conn = op.get_bind()
    # Check if the constraint exists before dropping it to avoid errors on repeated runs
    constraint_exists = conn.execute(sa.text("""
        SELECT 1 FROM information_schema.table_constraints
        WHERE constraint_name = 'fk_grades_student_id_students' AND table_name = 'grades'
    """)).scalar() is not None
    with op.batch_alter_table('grades', schema=None) as batch_op:
        batch_op.add_column(sa.Column('score', sa.Float(), nullable=False))
        batch_op.add_column(sa.Column('feedback', sa.String(length=1000), nullable=True))
        batch_op.add_column(sa.Column('graded_at', sa.DateTime(), nullable=False))
        batch_op.add_column(sa.Column('graded_by', sa.Integer(), nullable=False))
        batch_op.add_column(sa.Column('submission_id', sa.Integer(), nullable=False))
        if constraint_exists:
            batch_op.drop_constraint('fk_grades_student_id_students', type_='foreignkey')
        # Проверяем, существует ли constraint перед созданием
        fk_graded_by_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_graded_by_users' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_graded_by_exists:
            batch_op.create_foreign_key('fk_grades_graded_by_users', 'users', ['graded_by'], ['id'])
        # Проверяем, существует ли constraint перед созданием
        fk_submission_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.table_constraints
            WHERE constraint_name = 'fk_grades_submission_id_submissions' AND table_name = 'grades'
        """)).scalar() is not None
        if not fk_submission_id_exists:
            batch_op.create_foreign_key('fk_grades_submission_id_submissions', 'submissions', ['submission_id'], ['id'])
        # Проверяем, существует ли колонка student_id перед удалением
        column_student_id_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'student_id'
        """)).scalar() is not None
        if column_student_id_exists:
            batch_op.drop_column('student_id')
        # Проверяем, существует ли колонка subject перед удалением
        column_subject_exists = conn.execute(sa.text("""
            SELECT 1 FROM information_schema.columns
            WHERE table_name = 'grades' AND column_name = 'subject'
        """)).scalar() is not None
        if column_subject_exists:
            batch_op.drop_column('subject')
        batch_op.drop_column('value')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use batch mode for SQLite compatibility
    with op.batch_alter_table('grades', schema=None) as batch_op:
        batch_op.add_column(sa.Column('value', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('subject', sa.INTEGER(), nullable=False))
        batch_op.add_column(sa.Column('student_id', sa.INTEGER(), nullable=False))
        batch_op.drop_constraint('fk_grades_graded_by_users', type_='foreignkey')
        batch_op.drop_constraint('fk_grades_submission_id_submissions', type_='foreignkey')
        batch_op.create_foreign_key('fk_grades_student_id_students', 'students', ['student_id'], ['id'])
        batch_op.drop_column('submission_id')
        batch_op.drop_column('graded_by')
        batch_op.drop_column('graded_at')
        batch_op.drop_column('feedback')
        batch_op.drop_column('score')
    op.drop_index(op.f('ix_submissions_id'), table_name='submissions')
    op.drop_table('submissions')
    op.drop_index(op.f('ix_assignments_title'), table_name='assignments')
    op.drop_index(op.f('ix_assignments_id'), table_name='assignments')
    op.drop_table('assignments')
    op.drop_index(op.f('ix_courses_title'), table_name='courses')
    op.drop_index(op.f('ix_courses_id'), table_name='courses')
    op.drop_table('courses')
    # ### end Alembic commands ###
