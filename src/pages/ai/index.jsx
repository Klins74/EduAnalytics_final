import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import Header from '../../components/ui/Header';
import Sidebar from '../../components/ui/Sidebar';
import Breadcrumb from '../../components/ui/Breadcrumb';

import Icon from '../../components/AppIcon';
import ChatHistory from './components/ChatHistory';
import ContextPanel from './components/ContextPanel';
import QuickActions from './components/QuickActions';
import VoiceInput from './components/VoiceInput';

const AIPage = () => {
  const navigate = useNavigate();
  const [messages, setMessages] = useState([
    {
      id: 1,
      type: 'ai',
      content: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI-–ø–æ–º–æ—â–Ω–∏–∫ EduAnalytics! –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:

‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—É—á–µ–Ω–∏—è
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞

–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è?`,
      timestamp: new Date(Date.now() - 300000),
      hasInteractiveElements: true
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [selectedContext, setSelectedContext] = useState('overview');
  const [searchHistory, setSearchHistory] = useState('');
  const [isVoiceActive, setIsVoiceActive] = useState(false);
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    const userMessage = {
      id: Date.now(),
      type: 'user',
      content: inputValue,
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Simulate AI response with educational context
    setTimeout(() => {
      const aiResponse = {
        id: Date.now() + 1,
        type: 'ai',
        content: generateContextualAIResponse(inputValue),
        timestamp: new Date(),
        hasInteractiveElements: Math.random() > 0.5,
        chartData: Math.random() > 0.7 ? generateMockChartData() : null
      };
      setMessages(prev => [...prev, aiResponse]);
      setIsTyping(false);
    }, 2000);
  };

  const generateContextualAIResponse = (userInput) => {
    const responses = {
      '—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': `–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:

üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 4.2/5.0 (+0.3 –∫ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É)
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 87%
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è: 78%

üéØ **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**
‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã –ª—É—á—à–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—è—Ç–Ω–∏—Ü—É –Ω–∞ 23%
‚Ä¢ –†–æ—Å—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`,

      '–æ—Ç—á–µ—Ç': `–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç...

üìà **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥:**
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: 15,847 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: 23 –∑–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–µ–Ω–¥–∞
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: 8 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π

üîç **–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Ö–æ–¥–∫–∏:**
‚Ä¢ –ü–∏–∫–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 10:00-12:00 –∏ 14:00-16:00
‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã: –≤–∏–¥–µ–æ–ª–µ–∫—Ü–∏–∏ (92% –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π)
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏: –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏`,

      '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:

üéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
1. –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—É—Ä—Å–∞—Ö
2. –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∏–∫—Ä–æ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º
3. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ

üìö **–ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–µ–Ω—Ü–∏–∏:**
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è 12 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
‚Ä¢ –ì—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏–∏
‚Ä¢ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏`,

      'default': `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${new Date().toLocaleString('ru-RU')}
üéØ –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${Math.floor(Math.random() * 15) + 5}
üìà –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: ${Math.floor(Math.random() * 20) + 80}%

–ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`
    };

    const lowerInput = userInput.toLowerCase();
    if (lowerInput.includes('—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å') || lowerInput.includes('–æ—Ü–µ–Ω–∫–∏')) {
      return responses.—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å;
    } else if (lowerInput.includes('–æ—Ç—á–µ—Ç') || lowerInput.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
      return responses.–æ—Ç—á–µ—Ç;
    } else if (lowerInput.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') || lowerInput.includes('—Å–æ–≤–µ—Ç—ã')) {
      return responses.—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;
    }
    return responses.default;
  };

  const generateMockChartData = () => {
    return {
      type: 'line',
      data: Array.from({ length: 7 }, (_, i) => ({
        day: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][i],
        value: Math.floor(Math.random() * 100) + 50
      }))
    };
  };

  const quickSuggestions = [
    { text: '–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –∑–∞ –º–µ—Å—è—Ü', icon: 'TrendingUp' },
    { text: '–û—Ç—á–µ—Ç –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', icon: 'Users' },
    { text: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫—É—Ä—Å–∞', icon: 'Lightbulb' },
    { text: '–ü—Ä–æ–≥–Ω–æ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫–∑–∞–º–µ–Ω–æ–≤', icon: 'Target' }
  ];

  const handleQuickSuggestion = (suggestion) => {
    setInputValue(suggestion);
    inputRef.current?.focus();
  };

  const handleVoiceInput = (transcript) => {
    setInputValue(transcript);
    setIsVoiceActive(false);
  };

  const formatTime = (date) => {
    return date.toLocaleString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      day: '2-digit',
      month: '2-digit'
    });
  };

  return (
    <div className="min-h-screen bg-background">
      <Header />
      <Sidebar />
      
      <main className="lg:ml-60 pt-16">
        <div className="p-6">
          <Breadcrumb />
          
          {/* Page Header */}
          <div className="mb-6">
            <div className="flex items-center space-x-3 mb-2">
              <div className="w-10 h-10 bg-gradient-to-br from-secondary to-secondary-500 rounded-lg flex items-center justify-center">
                <Icon name="Bot" size={24} color="white" />
              </div>
              <div>
                <h1 className="text-2xl font-heading font-semibold text-text-primary">
                  AI-—á–∞—Ç –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                </h1>
                <p className="text-text-secondary">
                  –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ NLP-–∞–Ω–∞–ª–∏–∑–∞
                </p>
              </div>
              <div className="ml-auto flex items-center space-x-2">
                <div className="w-3 h-3 bg-success rounded-full ai-pulse" />
                <span className="text-sm text-text-secondary">AI –∞–∫—Ç–∏–≤–µ–Ω</span>
              </div>
            </div>
          </div>

          {/* Main Chat Interface */}
          <div className="grid grid-cols-1 lg:grid-cols-12 gap-6">
            {/* Chat Area - 8 columns */}
            <div className="lg:col-span-8">
              <div className="bg-surface border border-border rounded-lg shadow-card h-[600px] flex flex-col">
                {/* Chat Header */}
                <div className="flex items-center justify-between p-4 border-b border-border">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-gradient-to-br from-secondary to-secondary-500 rounded-full flex items-center justify-center">
                      <Icon name="Bot" size={16} color="white" />
                    </div>
                    <div>
                      <h3 className="font-heading font-medium text-text-primary">EduAnalytics AI</h3>
                      <span className="text-xs text-text-secondary">–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ</span>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button className="p-2 hover:bg-background rounded-lg transition-colors duration-150">
                      <Icon name="Search" size={16} className="text-text-secondary" />
                    </button>
                    <button className="p-2 hover:bg-background rounded-lg transition-colors duration-150">
                      <Icon name="MoreVertical" size={16} className="text-text-secondary" />
                    </button>
                  </div>
                </div>

                {/* Messages Area */}
                <div className="flex-1 overflow-y-auto p-4 space-y-4">
                  {messages.map((message) => (
                    <div
                      key={message.id}
                      className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`max-w-3xl ${message.type === 'user' ? 'ml-12' : 'mr-12'}`}>
                        {message.type === 'ai' && (
                          <div className="flex items-center space-x-2 mb-2">
                            <div className="w-6 h-6 bg-gradient-to-br from-secondary to-secondary-500 rounded-full flex items-center justify-center">
                              <Icon name="Bot" size={12} color="white" />
                            </div>
                            <span className="text-xs text-text-secondary">AI-–ø–æ–º–æ—â–Ω–∏–∫</span>
                            <span className="text-xs text-text-muted">‚Ä¢</span>
                            <span className="text-xs text-text-muted">{formatTime(message.timestamp)}</span>
                          </div>
                        )}
                        
                        <div
                          className={`px-4 py-3 rounded-lg ${
                            message.type === 'user' ?'bg-primary text-white' :'bg-background border border-border text-text-primary'
                          }`}
                        >
                          <div className="whitespace-pre-line">{message.content}</div>
                          
                          {/* Interactive Elements for AI messages */}
                          {message.type === 'ai' && message.hasInteractiveElements && (
                            <div className="mt-3 pt-3 border-t border-border-light">
                              <div className="flex flex-wrap gap-2">
                                <button className="px-3 py-1 bg-primary-50 text-primary text-xs rounded-full hover:bg-primary-100 transition-colors duration-150">
                                  –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </button>
                                <button className="px-3 py-1 bg-success-50 text-success text-xs rounded-full hover:bg-success-100 transition-colors duration-150">
                                  –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                                </button>
                                <button className="px-3 py-1 bg-accent-50 text-accent text-xs rounded-full hover:bg-accent-100 transition-colors duration-150">
                                  –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç
                                </button>
                              </div>
                            </div>
                          )}

                          {/* Chart Data Visualization */}
                          {message.chartData && (
                            <div className="mt-3 p-3 bg-background rounded border">
                              <h4 className="text-sm font-medium text-text-primary mb-2">–î–∏–Ω–∞–º–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</h4>
                              <div className="h-32 flex items-end space-x-2">
                                {message.chartData.data.map((item, index) => (
                                  <div key={index} className="flex-1 flex flex-col items-center">
                                    <div
                                      className="w-full bg-primary rounded-t"
                                      style={{ height: `${(item.value / 150) * 100}%` }}
                                    />
                                    <span className="text-xs text-text-secondary mt-1">{item.day}</span>
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>

                        {message.type === 'user' && (
                          <div className="flex items-center justify-end space-x-2 mt-1">
                            <span className="text-xs text-text-muted">{formatTime(message.timestamp)}</span>
                            <Icon name="Check" size={12} className="text-success" />
                          </div>
                        )}
                      </div>
                    </div>
                  ))}

                  {/* Typing Indicator */}
                  {isTyping && (
                    <div className="flex justify-start">
                      <div className="max-w-3xl mr-12">
                        <div className="flex items-center space-x-2 mb-2">
                          <div className="w-6 h-6 bg-gradient-to-br from-secondary to-secondary-500 rounded-full flex items-center justify-center">
                            <Icon name="Bot" size={12} color="white" />
                          </div>
                          <span className="text-xs text-text-secondary">AI-–ø–æ–º–æ—â–Ω–∏–∫ –ø–µ—á–∞—Ç–∞–µ—Ç...</span>
                        </div>
                        <div className="bg-background border border-border rounded-lg px-4 py-3">
                          <div className="flex space-x-1">
                            <div className="w-2 h-2 bg-text-secondary rounded-full animate-bounce" />
                            <div className="w-2 h-2 bg-text-secondary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                            <div className="w-2 h-2 bg-text-secondary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div ref={messagesEndRef} />
                </div>

                {/* Quick Suggestions */}
                {messages.length === 1 && (
                  <div className="px-4 py-2 border-t border-border">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                      {quickSuggestions.map((suggestion, index) => (
                        <button
                          key={index}
                          onClick={() => handleQuickSuggestion(suggestion.text)}
                          className="flex items-center space-x-2 p-2 text-left bg-background hover:bg-primary-50 rounded-lg transition-colors duration-150 text-sm"
                        >
                          <Icon name={suggestion.icon} size={16} className="text-primary" />
                          <span className="text-text-secondary">{suggestion.text}</span>
                        </button>
                      ))}
                    </div>
                  </div>
                )}

                {/* Input Area */}
                <div className="p-4 border-t border-border">
                  <form onSubmit={handleSendMessage} className="flex space-x-3">
                    <div className="flex-1 relative">
                      <input
                        ref={inputRef}
                        type="text"
                        value={inputValue}
                        onChange={(e) => setInputValue(e.target.value)}
                        placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ–± –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
                        className="w-full px-4 py-3 pr-12 border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-background"
                      />
                      <VoiceInput
                        onTranscript={handleVoiceInput}
                        isActive={isVoiceActive}
                        setIsActive={setIsVoiceActive}
                      />
                    </div>
                    <button
                      type="submit"
                      disabled={!inputValue.trim()}
                      className="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150 hover-lift flex items-center space-x-2"
                    >
                      <Icon name="Send" size={16} />
                      <span className="hidden sm:inline">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                    </button>
                  </form>
                </div>
              </div>
            </div>

            {/* Context Panel - 4 columns */}
            <div className="lg:col-span-4">
              <ContextPanel 
                selectedContext={selectedContext}
                onContextChange={setSelectedContext}
              />
            </div>
          </div>

          {/* Quick Actions */}
          <div className="mt-6">
            <QuickActions onActionClick={handleQuickSuggestion} />
          </div>

          {/* Chat History */}
          <div className="mt-6">
            <ChatHistory 
              searchQuery={searchHistory}
              onSearchChange={setSearchHistory}
            />
          </div>
        </div>
      </main>
    </div>
  );
};

export default AIPage;