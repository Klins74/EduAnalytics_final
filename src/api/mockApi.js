// src/api/mockApi.js

import { 
  kpiData, 
  activityData, 
  studentsData, 
  performanceData, 
  gradeDistribution, 
  trendData,
  engagementData,
  activityHeatmap,
  engagementMetrics,
  topEngagedStudents,
  lowEngagementStudents,
  classComparisonData,
  subjectComparisonData,
  teacherComparisonData,
  timeComparisonData,
  insightsByTab
} from './mockData.js';

const mockFetch = (data, delay = 500) => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve(data);
    }, delay);
  });
};

export const getKpiData = (timeRange) => {
  return mockFetch(kpiData);
};

export const getActivityData = (timeRange) => {
  return mockFetch(activityData);
};

export const getStudentsData = () => {
  return mockFetch(studentsData);
};

export const getPerformanceTabData = () => {
  const data = {
    performanceData,
    gradeDistribution,
    trendData,
  };
  return mockFetch(data);
};

export const getEngagementTabData = () => {
  const data = {
    engagementData,
    activityHeatmap,
    engagementMetrics,
    topEngagedStudents,
    lowEngagementStudents,
  };
  return mockFetch(data);
};

export const getComparativeTabData = () => {
  const data = {
    classComparison: classComparisonData,
    subjectComparison: subjectComparisonData,
    teacherComparison: teacherComparisonData,
    timeComparison: timeComparisonData,
  };
  return mockFetch(data);
};

export const getAiInsights = (tab) => {
  const data = insightsByTab[tab] || [];
  return mockFetch(data, 800);
};

// --- –ù–ï–î–û–°–¢–ê–Æ–©–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø AI-–ß–ê–¢–ê ---

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –Ω–∞—à–µ–π –∏–º–∏—Ç–∞—Ü–∏–µ–π "–º–æ–∑–≥–∞" AI
const generateContextualAIResponse = (userInput) => {
    const responses = {
        '—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å': `–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:\n\nüìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: 4.2/5.0\n‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: 87%\n\nüéØ **–ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã:**\n‚Ä¢ –°—Ç—É–¥–µ–Ω—Ç—ã –ª—É—á—à–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏\n‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ø—è—Ç–Ω–∏—Ü—É –Ω–∞ 23%`,
        '–æ—Ç—á–µ—Ç': `–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç...\n\nüìà **–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥:**\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∞–Ω–Ω—ã—Ö: 15,847 –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π\n‚Ä¢ –í—ã—è–≤–ª–µ–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: 23 –∑–Ω–∞—á–∏–º—ã—Ö —Ç—Ä–µ–Ω–¥–∞`,
        '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': `–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\nüéØ **–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n1. –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫—É—Ä—Å–∞—Ö\n2. –í–Ω–µ–¥—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–∏–∫—Ä–æ–æ–±—É—á–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º`,
        'default': `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∞—Å–ø–µ–∫—Ç–∞–º. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?`
    };
    const lowerInput = userInput.toLowerCase();
    if (lowerInput.includes('—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å') || lowerInput.includes('–æ—Ü–µ–Ω–∫–∏')) {
        return responses.—É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å;
    } else if (lowerInput.includes('–æ—Ç—á–µ—Ç') || lowerInput.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
        return responses.–æ—Ç—á–µ—Ç;
    } else if (lowerInput.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') || lowerInput.includes('—Å–æ–≤–µ—Ç—ã')) {
        return responses.—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏;
    }
    return responses.default;
};

// –ê —ç—Ç–æ –Ω–∞—à–∞ "—Ä—É—á–∫–∞" API –¥–ª—è —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—É—é –∏—Å–∫–∞–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
export const getAiChatResponse = (userInput) => {
  const responseText = generateContextualAIResponse(userInput);
  // –ò–º–∏—Ç–∏—Ä—É–µ–º "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è" AI —Å –ø–æ–º–æ—â—å—é –∑–∞–¥–µ—Ä–∂–∫–∏
  return mockFetch(responseText, 1500); 
};