# Docker Compose with environment profiles for EduAnalytics
# Usage: docker-compose -f docker-compose.yml -f docker-compose.profiles.yml --profile <profile> up

version: '3.8'

services:
  # Development profile - full stack with debugging
  eduanalytics-dev:
    profiles: ["dev", "development"]
    build:
      context: ./server
      dockerfile: Dockerfile
      target: development
    container_name: eduanalytics-dev
    ports:
      - "8000:8000"
      - "5678:5678"  # Debug port
    environment:
      - ENV=development
      - DEBUG=true
      - RELOAD=true
      - LOG_LEVEL=debug
      - DOCKER_SECRETS_PATH=/run/secrets
    volumes:
      - ./server:/app
      - ./server/uploads:/app/uploads
      - dev-secrets:/run/secrets:ro
    depends_on:
      - postgres-dev
      - redis-dev
    networks:
      - eduanalytics-dev
    secrets:
      - database_url
      - redis_url
      - secret_key
      - jwt_secret

  postgres-dev:
    profiles: ["dev", "development"]
    image: postgres:15-alpine
    container_name: postgres-dev
    environment:
      POSTGRES_DB: eduanalytics_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: devpassword
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./server/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - eduanalytics-dev

  redis-dev:
    profiles: ["dev", "development"]
    image: redis:7-alpine
    container_name: redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis-dev-data:/data
    networks:
      - eduanalytics-dev

  # Staging profile - production-like with monitoring
  eduanalytics-staging:
    profiles: ["staging", "stage"]
    build:
      context: ./server
      dockerfile: Dockerfile
      target: production
    container_name: eduanalytics-staging
    ports:
      - "8080:8000"
    environment:
      - ENV=staging
      - DEBUG=false
      - LOG_LEVEL=info
      - DOCKER_SECRETS_PATH=/run/secrets
    volumes:
      - staging-uploads:/app/uploads
      - staging-secrets:/run/secrets:ro
    depends_on:
      - postgres-staging
      - redis-staging
    networks:
      - eduanalytics-staging
    secrets:
      - database_url_staging
      - redis_url_staging
      - secret_key_staging
      - jwt_secret_staging
      - canvas_api_key
      - sentry_dsn
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres-staging:
    profiles: ["staging", "stage"]
    image: postgres:15-alpine
    container_name: postgres-staging
    environment:
      POSTGRES_DB: eduanalytics_staging
      POSTGRES_USER: postgres
    env_file:
      - .env.staging
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
    networks:
      - eduanalytics-staging
    secrets:
      - postgres_password_staging

  redis-staging:
    profiles: ["staging", "stage"]
    image: redis:7-alpine
    container_name: redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-staging-data:/data
    networks:
      - eduanalytics-staging
    env_file:
      - .env.staging

  # Production profile - optimized and secure
  eduanalytics-prod:
    profiles: ["prod", "production"]
    image: eduanalytics:${VERSION:-latest}
    container_name: eduanalytics-prod
    ports:
      - "80:8000"
      - "443:8443"
    environment:
      - ENV=production
      - DEBUG=false
      - LOG_LEVEL=warning
      - DOCKER_SECRETS_PATH=/run/secrets
    volumes:
      - prod-uploads:/app/uploads:rw
      - prod-logs:/app/logs:rw
    depends_on:
      - postgres-prod
      - redis-prod
    networks:
      - eduanalytics-prod
    secrets:
      - database_url_prod
      - redis_url_prod
      - secret_key_prod
      - jwt_secret_prod
      - canvas_api_key_prod
      - sentry_dsn_prod
      - ssl_cert
      - ssl_key
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres-prod:
    profiles: ["prod", "production"]
    image: postgres:15-alpine
    container_name: postgres-prod
    environment:
      POSTGRES_DB: eduanalytics
      POSTGRES_USER: eduanalytics
    volumes:
      - postgres-prod-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - eduanalytics-prod
    secrets:
      - postgres_password_prod
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  redis-prod:
    profiles: ["prod", "production"]
    image: redis:7-alpine
    container_name: redis-prod
    command: redis-server --requirepass-file /run/secrets/redis_password_prod --appendonly yes
    volumes:
      - redis-prod-data:/data
    networks:
      - eduanalytics-prod
    secrets:
      - redis_password_prod
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Monitoring services (optional extras profile)
  prometheus:
    profiles: ["monitoring", "extras"]
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - eduanalytics-monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    profiles: ["monitoring", "extras"]
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./observability/grafana/dashboards:/var/lib/grafana/dashboards
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - eduanalytics-monitoring

  jaeger:
    profiles: ["monitoring", "extras"]
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger-data:/tmp
    networks:
      - eduanalytics-monitoring

  # Business Intelligence services
  metabase:
    profiles: ["bi", "extras"]
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3001:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5432
      MB_DB_USER: metabase
      MB_DB_HOST: postgres-metabase
    volumes:
      - metabase-data:/metabase-data
    depends_on:
      - postgres-metabase
    networks:
      - eduanalytics-bi

  postgres-metabase:
    profiles: ["bi", "extras"]
    image: postgres:15-alpine
    container_name: postgres-metabase
    environment:
      POSTGRES_DB: metabase
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase123
    volumes:
      - postgres-metabase-data:/var/lib/postgresql/data
    networks:
      - eduanalytics-bi

  # HashiCorp Vault for secrets management
  vault:
    profiles: ["vault", "secrets"]
    image: vault:latest
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
    networks:
      - eduanalytics-secrets
    cap_add:
      - IPC_LOCK

# Networks
networks:
  eduanalytics-dev:
    driver: bridge
  eduanalytics-staging:
    driver: bridge
  eduanalytics-prod:
    driver: bridge
  eduanalytics-monitoring:
    driver: bridge
  eduanalytics-bi:
    driver: bridge
  eduanalytics-secrets:
    driver: bridge

# Volumes
volumes:
  # Development
  postgres-dev-data:
  redis-dev-data:
  dev-secrets:

  # Staging
  postgres-staging-data:
  redis-staging-data:
  staging-uploads:
  staging-secrets:

  # Production
  postgres-prod-data:
  redis-prod-data:
  prod-uploads:
  prod-logs:

  # Monitoring
  prometheus-data:
  grafana-data:
  jaeger-data:

  # Business Intelligence
  metabase-data:
  postgres-metabase-data:

  # Secrets Management
  vault-data:
  vault-logs:

# Secrets (for Docker Swarm mode or external secrets)
secrets:
  # Development
  database_url:
    external: true
  redis_url:
    external: true
  secret_key:
    external: true
  jwt_secret:
    external: true

  # Staging
  database_url_staging:
    external: true
  redis_url_staging:
    external: true
  secret_key_staging:
    external: true
  jwt_secret_staging:
    external: true
  postgres_password_staging:
    external: true

  # Production
  database_url_prod:
    external: true
  redis_url_prod:
    external: true
  secret_key_prod:
    external: true
  jwt_secret_prod:
    external: true
  postgres_password_prod:
    external: true
  redis_password_prod:
    external: true

  # External APIs
  canvas_api_key:
    external: true
  canvas_api_key_prod:
    external: true
  sentry_dsn_prod:
    external: true

  # SSL Certificates
  ssl_cert:
    external: true
  ssl_key:
    external: true
