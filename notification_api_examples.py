#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π EduAnalytics

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö
—Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ EduAnalytics.
"""

import requests
import json
from datetime import datetime, timedelta
from typing import Dict, Any

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api/v1"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": "Bearer YOUR_ACCESS_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
}

def create_test_data():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    print("=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===")
    
    # 1. –°–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–∞
    course_data = {
        "name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è",
        "description": "–ö—É—Ä—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
        "code": "TEST-PROG-001"
    }
    
    response = requests.post(f"{BASE_URL}/courses/", 
                           headers=HEADERS, 
                           json=course_data)
    if response.status_code == 201:
        course = response.json()
        print(f"‚úÖ –ö—É—Ä—Å —Å–æ–∑–¥–∞–Ω: {course['name']} (ID: {course['id']})")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞: {response.text}")
        return None
    
    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
    student_data = {
        "username": "test_student",
        "email": "student@test.com",
        "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
        "last_name": "–°—Ç—É–¥–µ–Ω—Ç",
        "role": "student"
    }
    
    response = requests.post(f"{BASE_URL}/users/", 
                           headers=HEADERS, 
                           json=student_data)
    if response.status_code == 201:
        student = response.json()
        print(f"‚úÖ –°—Ç—É–¥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {student['first_name']} {student['last_name']} (ID: {student['id']})")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞: {response.text}")
        return None
    
    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    teacher_data = {
        "username": "test_teacher",
        "email": "teacher@test.com",
        "first_name": "–¢–µ—Å—Ç–æ–≤—ã–π",
        "last_name": "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
        "role": "teacher"
    }
    
    response = requests.post(f"{BASE_URL}/users/", 
                           headers=HEADERS, 
                           json=teacher_data)
    if response.status_code == 201:
        teacher = response.json()
        print(f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {teacher['first_name']} {teacher['last_name']} (ID: {teacher['id']})")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è: {response.text}")
        return None
    
    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –¥–µ–¥–ª–∞–π–Ω–æ–º
    due_date = (datetime.now() + timedelta(days=3)).isoformat()
    assignment_data = {
        "title": "–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
        "description": "–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö",
        "course_id": course['id'],
        "due_date": due_date,
        "max_score": 100
    }
    
    response = requests.post(f"{BASE_URL}/assignments/", 
                           headers=HEADERS, 
                           json=assignment_data)
    if response.status_code == 201:
        assignment = response.json()
        print(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {assignment['title']} (ID: {assignment['id']})")
        print(f"   –î–µ–¥–ª–∞–π–Ω: {assignment['due_date']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: {response.text}")
        return None
    
    return {
        "course": course,
        "student": student,
        "teacher": teacher,
        "assignment": assignment
    }

def test_grade_notification(test_data: Dict[str, Any]):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ü–µ–Ω–∫–∞—Ö
    """
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ü–µ–Ω–∫–∞—Ö ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª–µ –æ—Ü–µ–Ω–æ–∫
    grade_data = {
        "student_id": test_data['student']['id'],
        "assignment_id": test_data['assignment']['id'],
        "score": 85,
        "comment": "–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞, –Ω–æ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é"
    }
    
    response = requests.post(f"{BASE_URL}/gradebook/entries/", 
                           headers=HEADERS, 
                           json=grade_data)
    
    if response.status_code == 201:
        grade = response.json()
        print(f"‚úÖ –û—Ü–µ–Ω–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞: {grade['score']} –±–∞–ª–ª–æ–≤")
        print(f"   –°—Ç—É–¥–µ–Ω—Ç: {test_data['student']['first_name']} {test_data['student']['last_name']}")
        print(f"   –ó–∞–¥–∞–Ω–∏–µ: {test_data['assignment']['title']}")
        print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {grade['comment']}")
        print("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –æ—Ü–µ–Ω–∫–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {response.text}")

def test_feedback_notification(test_data: Dict[str, Any]):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    """
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ===")
    
    # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞
    submission_data = {
        "assignment_id": test_data['assignment']['id'],
        "student_id": test_data['student']['id'],
        "content": "–†–µ—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è",
        "file_path": "/uploads/test_submission.pdf"
    }
    
    response = requests.post(f"{BASE_URL}/submissions/", 
                           headers=HEADERS, 
                           json=submission_data)
    
    if response.status_code == 201:
        submission = response.json()
        print(f"‚úÖ –†–∞–±–æ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞ (ID: {submission['id']})")
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        feedback_data = {
            "submission_id": submission['id'],
            "author_id": test_data['teacher']['id'],
            "content": "–û—Ç–ª–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ! –ö–æ–¥ —á–∏—Å—Ç—ã–π –∏ —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π. –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.",
            "rating": 4
        }
        
        response = requests.post(f"{BASE_URL}/feedback/", 
                               headers=HEADERS, 
                               json=feedback_data)
        
        if response.status_code == 201:
            feedback = response.json()
            print(f"‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {feedback['id']})")
            print(f"   –ê–≤—Ç–æ—Ä: {test_data['teacher']['first_name']} {test_data['teacher']['last_name']}")
            print(f"   –†–µ–π—Ç–∏–Ω–≥: {feedback['rating']}/5")
            print(f"   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {feedback['content'][:50]}...")
            print("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {response.text}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã: {response.text}")

def test_schedule_notification(test_data: Dict[str, Any]):
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    """
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ ===")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏
    schedule_date = (datetime.now() + timedelta(days=1)).date().isoformat()
    schedule_data = {
        "course_id": test_data['course']['id'],
        "instructor_id": test_data['teacher']['id'],
        "date": schedule_date,
        "start_time": "10:00:00",
        "end_time": "11:30:00",
        "location": "–ê—É–¥–∏—Ç–æ—Ä–∏—è 101",
        "description": "–õ–µ–∫—Ü–∏—è –ø–æ –æ—Å–Ω–æ–≤–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
    }
    
    response = requests.post(f"{BASE_URL}/schedules/", 
                           headers=HEADERS, 
                           json=schedule_data)
    
    if response.status_code == 201:
        schedule = response.json()
        print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (ID: {schedule['id']})")
        print(f"   –î–∞—Ç–∞: {schedule['date']}")
        print(f"   –í—Ä–µ–º—è: {schedule['start_time']} - {schedule['end_time']}")
        print(f"   –ú–µ—Å—Ç–æ: {schedule['location']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {schedule['description']}")
        print("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        update_data = {
            "location": "–ê—É–¥–∏—Ç–æ—Ä–∏—è 205 (–∏–∑–º–µ–Ω–µ–Ω–æ)",
            "description": "–õ–µ–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –¥—Ä—É–≥—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é"
        }
        
        response = requests.patch(f"{BASE_URL}/schedules/{schedule['id']}", 
                                headers=HEADERS, 
                                json=update_data)
        
        if response.status_code == 200:
            updated_schedule = response.json()
            print(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            print(f"   –ù–æ–≤–æ–µ –º–µ—Å—Ç–æ: {updated_schedule['location']}")
            print(f"   –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {updated_schedule['description']}")
            print("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {response.text}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {response.text}")

def test_deadline_checker():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
    """
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ ===")
    
    # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —á–µ—Ä–µ–∑ API (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–æ–π endpoint)
    response = requests.post(f"{BASE_URL}/tasks/check-deadlines", 
                           headers=HEADERS)
    
    if response.status_code == 200:
        result = response.json()
        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π —Å –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–º–∏—Å—è –¥–µ–¥–ª–∞–π–Ω–∞–º–∏: {result.get('assignments_checked', 0)}")
        print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {result.get('notifications_sent', 0)}")
        print("üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤: {response.text}")
        print("‚ÑπÔ∏è  –í–æ–∑–º–æ–∂–Ω–æ, endpoint –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.")

def test_webhook_endpoint():
    """
    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint (—Å–∏–º—É–ª—è—Ü–∏—è n8n)
    """
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint ===")
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    test_notification = {
        "event_type": "test_notification",
        "timestamp": datetime.now().isoformat() + "Z",
        "message": "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook",
        "test_data": {
            "student_name": "–¢–µ—Å—Ç–æ–≤—ã–π –°—Ç—É–¥–µ–Ω—Ç",
            "course_name": "–¢–µ—Å—Ç–æ–≤—ã–π –∫—É—Ä—Å"
        }
    }
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ webhook URL (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à URL)
    webhook_url = "http://localhost:5678/webhook/eduanalytics-webhook"
    
    try:
        response = requests.post(webhook_url, 
                               json=test_notification, 
                               timeout=10)
        
        if response.status_code == 200:
            print(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
        else:
            print(f"‚ùå Webhook –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response.status_code} - {response.text}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ webhook: {e}")
        print("‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ n8n –∑–∞–ø—É—â–µ–Ω –∏ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π EduAnalytics")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    test_data = create_test_data()
    
    if not test_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    test_grade_notification(test_data)
    test_feedback_notification(test_data)
    test_schedule_notification(test_data)
    test_deadline_checker()
    test_webhook_endpoint()
    
    print("\n" + "=" * 60)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
    print("1. –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    print("2. n8n workflow –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ webhook'–æ–≤")
    print("3. –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (email, telegram –∏ —Ç.–¥.)")

if __name__ == "__main__":
    main()

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

def check_notification_service_health():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    try:
        response = requests.get(f"{BASE_URL}/health", headers=HEADERS, timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print(f"‚ö†Ô∏è  API —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥: {response.status_code}")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint
    webhook_url = "http://localhost:5678/webhook/eduanalytics-webhook"
    try:
        response = requests.get(webhook_url, timeout=5)
        print("‚úÖ Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("‚ÑπÔ∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ n8n –∑–∞–ø—É—â–µ–Ω")

def send_test_notification(event_type: str, **kwargs):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    notification_data = {
        "event_type": event_type,
        "timestamp": datetime.now().isoformat() + "Z",
        **kwargs
    }
    
    webhook_url = "http://localhost:5678/webhook/eduanalytics-webhook"
    
    try:
        response = requests.post(webhook_url, json=notification_data, timeout=10)
        print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{event_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.status_code}")
        return response
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        return None

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É—Ç–∏–ª–∏—Ç:
# check_notification_service_health()
# send_test_notification("test_event", message="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")